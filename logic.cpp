#include "logic.h"
#include <QVector>


Logic::Logic()
{
    for(int i=0;i<9;i++)
        for(int j=0;j<9;j++){
            matrix[i][j]=-1;
        }
    //m[y][x]
    int m[9][9]={{3,6,9,-1,5,2,4,7,8},
                 {8,5,-1,6,7,4,9,3,1},
                 {7,1,4,3,-1,8,2,6,5},
                 {6,8,3,9,2,7,1,5,4},
                 {5,9,7,4,1,6,8,2,-1},
                 {-1,2,1,8,3,5,6,9,7},
                 {1,3,8,7,6,9,-1,4,2},
                 {2,4,-1,5,8,3,7,1,9},
                 {9,-1,5,2,4,1,3,-1,6}
                };
    for(int i=0;i<9;i++){
        for(int j=0;j<9;j++){
            label[i][j]=0;
            matrix[j][i] = m[j][i];
            if (matrix[j][i] == -1){
                initial[j][i] = 0;
            }
            else{
                initial[j][i] = 1;
            }
        }
    }
    for(int i=0;i<9;i++)
        for(int j=0;j<9;j++)
            for(int k=0;k<10;k++){
                grid_num[i][j][k]=0;
            }
}

void Logic::setStage(int n){
    if(n==1){
        int m[9][9]={{3,6,9,-1,5,2,4,7,8},
                         {8,5,-1,6,7,4,9,3,1},
                         {7,1,4,3,-1,8,2,6,5},
                         {6,8,3,9,2,7,1,5,4},
                         {5,9,7,4,1,6,8,2,-1},
                         {-1,2,1,8,3,5,6,9,7},
                         {1,3,8,7,6,9,-1,4,2},
                         {2,4,-1,5,8,3,7,1,9},
                         {9,-1,5,2,4,1,3,-1,6}
                        };
        regulation(m);
    }
    else if(n==2){
        int m[9][9]={
            {5,7,1,9,8,3,4,6,-1},
            {4,-1,8,6,2,7,9,1,5},
            {9,6,2,1,-1,5,3,8,7},
            {7,4,-1,2,1,9,-1,3,6},
            {-1,8,6,3,7,4,5,2,9},
            {2,9,3,8,5,-1,7,4,1},
            {6,2,9,-1,3,8,1,5,4},
            {8,-1,4,5,-1,2,6,7,3},
            {3,5,7,4,6,1,2,-1,8}
        };
        regulation(m);
    }
    else if(n==3){
        int m[9][9]={
            {-1,6,9,-1,8,4,7,5,3},
            {5,8,7,-1,1,9,4,2,6},
            {2,3,-1,6,-1,7,8,9,1},
            {6,9,1,4,7,-1,2,3,8},
            {7,5,2,8,3,1,-1,4,9},
            {3,4,8,9,6,2,1,-1,5},
            {4,-1,5,1,9,6,3,-1,7},
            {9,1,3,7,2,8,-1,6,4},
            {8,7,6,5,4,3,-1,1,-1}
        };
        regulation(m);
    }
    else if(n==4){
        int m[9][9]={
            {4,9,6,3,1,-1,-1,2,5},
            {8,5,2,4,-1,-1,3,1,9},
            {1,-1,-1,5,9,2,4,8,6},
            {9,1,4,8,2,7,-1,-1,3},
            {6,8,5,9,3,4,-1,7,2},
            {-1,3,-1,6,5,1,8,-1,4},
            {-1,2,8,1,6,9,5,4,7},
            {7,6,1,-1,-1,5,-1,3,8},
            {5,4,9,7,-1,3,2,-1,1}
        };
        regulation(m);
    }
    else if(n==5){
        int m[9][9]={
            {9,4,5,2,-1,7,-1,8,6},
            {8,-1,3,6,9,1,7,5,-1},
            {7,1,6,-1,4,8,3,2,9},
            {2,-1,7,8,1,-1,9,6,5},
            {5,9,8,3,7,-1,2,4,1},
            {4,6,1,9,2,5,8,-1,7},
            {6,-1,2,1,5,3,-1,9,-1},
            {3,8,4,7,6,-1,5,1,2},
            {-1,5,-1,4,8,2,6,7,3}
        };
        regulation(m);
    }
    else if(n==6){
        int m[9][9]={
            {2,-1,8,3,-1,-1,-1,9,4},
            {5,-1,7,6,-1,2,8,-1,1},
            {1,3,-1,-1,-1,9,5,-1,6},
            {-1,7,-1,-1,-1,-1,2,-1,-1},
            {-1,-1,-1,-1,7,3,-1,1,-1},
            {8,1,-1,-1,2,4,-1,-1,7},
            {3,-1,-1,1,6,-1,-1,7,2},
            {-1,4,-1,2,9,-1,-1,-1,-1},
            {-1,-1,1,-1,-1,-1,-1,6,-1}
        };
        regulation(m);
    }
    else if(n==7){
        int m[9][9]={
            {-1,1,5,-1,-1,8,4,-1,9},
            {-1,-1,3,7,-1,1,2,-1,-1},
            {8,-1,9,6,-1,-1,3,7,-1},
            {-1,-1,-1,-1,-1,3,-1,-1,4},
            {4,3,1,-1,6,2,7,9,-1},
            {-1,-1,6,-1,-1,-1,-1,1,-1},
            {-1,7,-1,-1,-1,-1,8,-1,-1},
            {-1,9,8,2,5,-1,1,4,6},
            {5,-1,-1,8,-1,-1,-1,-1,-1}
        };
        regulation(m);
    }
    else if(n==8){
        int m[9][9]={
            {-1,9,8,-1,-1,-1,-1,-1,2},
            {-1,-1,-1,-1,-1,-1,-1,-1,-1},
            {7,-1,-1,-1,-1,-1,4,9,-1},
            {-1,-1,7,4,9,-1,-1,1,3},
            {6,8,-1,1,5,3,-1,-1,-1},
            {9,1,-1,2,-1,-1,-1,4,-1},
            {-1,7,-1,-1,-1,8,-1,6,1},
            {-1,-1,-1,9,6,1,-1,2,4},
            {1,4,-1,-1,2,5,9,-1,-1}
        };
        regulation(m);
    }
    else if(n==9){
        int m[9][9]={
            {-1,-1,-1,-1,5,7,4,-1,2},
            {6,-1,7,-1,-1,-1,1,-1,5},
            {3,-1,5,4,6,-1,-1,-1,-1},
            {-1,-1,2,-1,-1,4,-1,1,3},
            {4,-1,-1,5,8,3,-1,-1,9},
            {-1,3,-1,9,1,-1,-1,-1,-1},
            {-1,-1,-1,-1,9,8,-1,5,-1},
            {5,-1,-1,2,3,6,-1,-1,1},
            {1,6,-1,7,-1,-1,3,-1,-1}
        };
        regulation(m);
    }
}

bool Logic::check(){
    bool judge = true;
    //check
    for(int i=0;i<9;i++){
        int s1 = 0;
        int s2 = 0;
        for(int j=0;j<9;j++){
            s1 += matrix[i][j];
            s2 += matrix[j][i];
        }
        if(s1!=45 || s2!=45)
            judge = false;
    }

    for(int i=0;i<3;i++){
        for(int j=0;j<3;j++){
            int s = 0;
            for(int m=0;m<3;m++){
                for(int n=0;n<3;n++){
                    s += matrix[i*3+m][j*3+n];
                }
            }
            if(s!=45)
            {judge = false;}
        }
    }
    return judge;
}
